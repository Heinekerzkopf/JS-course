'use strict'


// method of arrays: const newArray = oldArray.map(function(value, key, array) {
//   return (...)
// })
//---------------------------------------------------------------------------------

const rub = [100, 222, 340, 545];

// we want to convert them into DOLLARS :d

// hmm, lets use method map()!

const USD = [];

rub.forEach(function (value) {
    //USD.push(Math.round(value / 72)); //Math.round - not bad, but... we have better!
    USD.push((value / 72).toFixed(2) + '$');
})

console.log((USD));

//========================================================================================================================================================

// method map, lets check!

const USDfromRUB = rub.map(function (value) {
    return (value / 72).toFixed(2) + '$';
})

// shorter version:

const USDfromRUBTwo = rub.map(value => (value / 72).toFixed(2) + '$');

//========================================================================================================================================================


console.log(USDfromRUB);

console.log(USDfromRUBTwo);

//========================================================================================================================================================
//========================================================================================================================================================
//========================================================================================================================================================
//========================================================================================================================================================
//========================================================================================================================================================

// method filter().
// method filter().
// method filter().

// same as .map(), filter method doesnt change the original array, as same as map filter returns values to new array


const arr = [1, -12, 22, 27, -26, -100, 123, 9];

const filteredArray = arr.filter(function (value) {
    return value > 0;
});

console.log(filteredArray);

//========================================================================================================================================================
//========================================================================================================================================================


// method reduce()
// method reduce()
// method reduce()

const arrTwo = [5, 5, 5, 5, 5];

const arrTo = arrTwo.reduce((prev, next) => prev + next);

console.log(arrTo);

// practicing


const dogs1 = [5, 2, 4, 1,15,8,3];
const dogs2 = [16,6,18,5,6,1,4];

function calcAverageHumanAge(dogs) {
    const humanAge = dogs.map(function(age) {
        return age <= 2 ? 2 * age : 16 + age * 4;
    });
    console.log(humanAge);

    const adultDogs = humanAge.filter(function(age) {
        return age >= 18;
    });

    console.log(adultDogs);

    const averageDogsAge = adultDogs.reduce((accum, next) => {
        return accum + next 
    }) / adultDogs.length;
    console.log(averageDogsAge);

}

calcAverageHumanAge([...dogs1, ...dogs2]);

//========================================================================================================================================================
//========================================================================================================================================================
//========================================================================================================================================================
//========================================================================================================================================================

const account2 = {
    owner: "Anna Filimonova",
    movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],
    pin: 2222,
};

const accounts = [account2];


// array method find();

const numArr = [1, 2, 3, 45, 6, -12, -124, 1205, 5190254, 3, 1230, -12350345];

const firstNegativeNumber = numArr.find(num => num < 0);

// method find returns first element by specific parameters

console.log(firstNegativeNumber);

//========================================================================================================================================================

const acc = accounts.find(acc => acc.owner === "Anna Filimonova");

console.log(acc);

//========================================================================================================================================================
//========================================================================================================================================================
//========================================================================================================================================================

// method of arrays .findIndex();

//========================================================================================================================================================
const accIndex = accounts.findIndex(acc => acc.login === 'af');

console.log(accIndex);

//========================================================================================================================================================
// some() and every() - array methods

const accNum = [1, 2, 3, 4, 5, -10, 20, -20, -5, 1053];

// some()

const newAccNum = accNum.some(function (item) {
    return item > 0;
});

console.log(newAccNum);

// every();

const newAccNumTwo = accNum.every(function (item) {
    return item > 0;
});

console.log(newAccNumTwo);

//========================================================================================================================================================
//========================================================================================================================================================
// flat() - array methods
// works only with first layer, if u dont write the number in the () what level u need


const someArr = [[1, 2, 3], 4, [5, 6, 7, 8], [[50]]];

const newArr = someArr.flat(2);

console.log(newArr);
console.log(someArr);

//========================================================================================================================================================
// sort() - array method

// works only with strings and preferly with NUMBERS, but with special formula

const someArrTwo = ['e', 'b', 'a', 'c', 'd', 'k', 'l'];
const numArrTwo = [1, 2, 4, 5, 47, 12495, -41204, 496, 35, -2305];

console.log(someArrTwo.sort());

console.log(numArrTwo.sort(function(a, b) {
    return a - b
}));

//========================================================================================================================================================
// 

// array method fill(); - changes the original array

const randomArr = [1, 2, 3, 45, 6, 7];

randomArr.fill('hello', 2, 4);

console.log(randomArr);

// method Array.from(); - doesnt change the original array

const string = '12345';

const newArray = Array.from(string, function(el, index) {
    return 'number ' + el;
});

console.log(newArray);

//========================================================================================================================================================
//========================================================================================================================================================
//========================================================================================================================================================
//========================================================================================================================================================
//========================================================================================================================================================
console.log('--------------------');
console.log('--------------------');
console.log('--------------------');
console.log(' ');
console.log(' ');
console.log(' ');
// practicing
/*
ОПИСАНИЕ:
-Вам нужно выяснить кто из собак переедает или недоедает
-Переедает\Недоедает - означает что собака есть больше рекомендованной порции или меньше рекомендованной на 10%
-Нормальной порцией для собаки считается та, которая в пределах 10% больше или меньше рекомендованной
-Формула: recommendedFood = weight ** 0.75 * 28

ЗАДАЧИ:
1) Переберите массив dogs, и высчитайте рекомендованное количество еды для каждой собаки. Запишите полученный результат как новое свойство объектов массива dogs.
2) Найдите с помощью метода собаку владельца Marina и с помощью тернарного оператора определите, ест ли ее собака больше или меньше рекомендованной нормы (recommendedFood). Ответ выведите в консоль: в одном случае сообщение о том, что собака переедает, в другом - что недоедает.
3) Создайте массив, в который попадут все владельцы собак, которые едят больше рекомендованной нормы ('ownersEatTooMuch'), и массив, в который попадут хозяева собак, которые едят меньше рекомендованной нормы ('ownersEatTooLittle').
4)Выведите в консоль строку с сообщением: Пример: "Собаки Marina и Viktor едят слишком много! Собаки Masha и Dima едят слишком мало" (Данные возмите из массива который получится в задании номер 3).
5) Выведите в консоль сообщение с булевым значением, есть ли вообще хоть одна собака которая ест в точности столько сколько нужно по формуле. Просто (true/false)
6) Выведите в консоль сообщение с булевым значением, есть ли вообще хоть одна собака которая питается правильно (В пределах 10% от необходимого). Просто (true/false)
7)Создайте массив содержащий собак которые питаются достаточно (В пределах 10%).
8) Создайте независимую копию массива с собаками и отсортируйте его по рекомендованным порциям еды, в возрастающем порядке.

ПОДСКАЗКА:
Достаточное питание собаки должно быть между 90% и 110% от рекомендованной порции.

ДАННЫЕ:
const dogs = [
  { weight: 22, curFood: 250, owners: ['Anna', 'Viktor'] },
  { weight: 8, curFood: 200, owners: ['Masha'] },
  { weight: 13, curFood: 275, owners: ['Marina', 'Ivan'] },
  { weight: 32, curFood: 340, owners: ['Dima'] }
];


*/

const dogs = [
    { weight: 22, curFood: 250, owners: ['Anna', 'Viktor'] },
    { weight: 8, curFood: 200, owners: ['Masha'] },
    { weight: 13, curFood: 275, owners: ['Marina', 'Ivan'] },
    { weight: 32, curFood: 340, owners: ['Dima'] }
  ];

//========================================================================================================================================================
// 1.

// for ( let i = 0; i < dogs.length; i++) {
//     dogs[i].recommendedFood = Math.floor(dogs[i].weight ** 0.75 * 28);
// }

// console.log(dogs);

dogs.forEach(obj => {
    obj.recommendedFood = Math.floor(obj.weight ** 0.75 * 28)
});

console.log(dogs);

//========================================================================================================================================================
// 2.

const marinasDog = dogs.find(obj => {
    return obj.owners.includes('Marina');
});

console.log(marinasDog);

console.log(`Marina's Dog eat too ${marinasDog.curFood > marinasDog.recommendedFood ? 'much' : 'little'}`);

//========================================================================================================================================================
// 3.

// my variant

let dogsEatTooMuch = [];
let dogsEatTooLittle = [];

const kurnik = dogs.map(function(el) {
    if (el.recommendedFood > el.curFood) {
        dogsEatTooLittle.push(el.owners);
    } else {
        dogsEatTooMuch.push(el.owners)
    }
});

console.log(dogsEatTooMuch.flat());
console.log(dogsEatTooLittle.flat());

// variant from video

const ownersEatTooMuch = dogs.filter(obj => {
    return obj.curFood > obj.recommendedFood
}).map(obj => obj.owners).flat();

console.log(ownersEatTooMuch);

//========================================================================================================================================================
// 4.

console.log(`Dogs of ${dogsEatTooLittle.flat().join(' and ')} don't eat enough! Dogs of ${ dogsEatTooMuch.flat().join(' and ') } eat too much food!`);

//========================================================================================================================================================
// 5.

const isThereHealthyDog = dogs.some(el => {
    el.recommendedFood === el.curFood
})

console.log(isThereHealthyDog);

//========================================================================================================================================================
// 6.

console.log(dogs.some(dog => dog.curFood > dog.recommendedFood * 0.9 && 
    dog.curFood < dog.recommendedFood * 1.1));

//========================================================================================================================================================
// 7.

console.log(dogs.filter(dog => dog.curFood > dog.recommendedFood * 0.9 && 
    dog.curFood < dog.recommendedFood * 1.1));

//========================================================================================================================================================
// 8.

const sortedDogs = dogs.slice().sort((a, b) => a.recommendedFood - b.recommendedFood);

console.log(sortedDogs);

//========================================================================================================================================================
